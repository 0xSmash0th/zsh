#autoload

# Generate all possible completions. Note that this is not intended as
# a normal completion function, but as one possible value for the
# compconfig[completer] parameter.

local comp name

# If we have a user-supplied context name, use only that.

if [[ -n "$compcontext" ]]; then
  comp="$_comps[$compcontext]"
  [[ -z "$comp" ]] || "$comp"

  return
fi

# An entry for `-first-' is the replacement for `compctl -T'

comp="$_comps[-first-]"
if [[ ! -z "$comp" ]]; then
  "$comp"
  if [[ "$_compskip" = all ]]; then
    _compskip=''
    (( compstate[nmatches] ))
    return
  fi
fi


# For arguments and command names we use the `_normal' function.

if [[ "$compstate[context]" = command ]]; then
  _normal -s
else
  # Let's see if we have a special completion definition for the other
  # possible contexts.

  comp=''

  case $compstate[context] in
  equal)           comp="$_comps[-equal-]";;
  tilde)           comp="$_comps[-tilde-]";;
  redirect)        comp="$_comps[-redirect-]";;
  math)            comp="$_comps[-math-]";;
  subscript)       comp="$_comps[-subscript-]";;
  value)           comp="$_comps[-value-]";;
  array_value)     comp="$_comps[-array-value-]";;
  condition)       comp="$_comps[-condition-]";;
  parameter)       comp="$_comps[-parameter-]";;
  brace_parameter) comp="$_comps[-brace-parameter-]";;
  esac

  # If not, we use default completion, if any.

  if [[ -z "$comp" ]]; then
    if [[ "$_compskip" = *default* ]]; then
      _compskip=''
      return 1
    fi
    comp="$_comps[-default-]"
  fi
  [[ -z "$comp" ]] || "$comp"
fi

_compskip=''

(( compstate[nmatches] ))
